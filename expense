#! /usr/bin/env ruby

require 'pg'

 class CLI
  def initialize
    @app = ExpenseData.new
  end

  def run
    puts
    return display_help if ARGV.empty?

    command, *options = ARGV

    case command
    when 'list'
      @app.list_expenses()
    when 'add'
      error_message = validate_new_expense(options)
      abort error_message if error_message

      @app.add_expense(options)
      puts "The expense has been added."
    when 'search'
      error_message = validate_search(options)
      abort error_message if error_message

      @app.search_expenses(options)
    end
  end

  def display_help
    puts <<~MENU
      An expense recording system

      Commands:

        add AMOUNT MEMO  record a new expense
        clear            delete all expenses
        list             list all expenses
        delete NUMBER    remove expense with id NUMBER
        search QUERY     list expenses with a matching QUERY field (use quotations for multi-word queries)
    MENU
  end

  def validate_new_expense(options)
    case options.size
    when (0...2)
      "You must provide an amount and memo."
    when (3...)
      "Memos with multiple words must be wrapped with quotation marks (\" \")."
    else
      if options.first != options.first.to_f.to_s
        "The amount must be entered first (as digits)."
      end
    end
  end

  def validate_search(options)
    # display error message if query is multiple words without quotation marks
    case options.size
    when 0
      "You must provide a search query."
    when (2..)
      "Memos with multiple words must be wrapped with quotation marks (\" \")."
    end
  end
end

 class ExpenseData
  def initialize
    @connection = PG.connect(dbname: 'expenses')
  end

  def list_expenses(results = nil)
    results = @connection.exec("SELECT * FROM expenses ORDER BY created_on;")
    id, amount, memo, date = results.fields

    # column name
    puts sprintf(' %-4s | %-20s | %-10s | %-s', id, date, amount, memo)
    puts "-" * 80
    # records
    results.each do |record|
      id, amount, memo, date = record.values
      puts sprintf(' %-4s | %-20s | %-10s | %-s', id, date, amount, memo)
    end
  end

  def add_expense(options)
    sql = "INSERT INTO expenses (amount, memo) VALUES ($1, $2);"
    @connection.exec_params(sql, [options.first.to_f, options.last])
  end

  def search_expenses(options)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1;"
    results = @connection.exec_params(sql, ['%' + options.first + '%'])
    id, amount, memo, date = results.fields
    
    # column name
    puts sprintf(' %-4s | %-20s | %-10s | %-s', id, date, amount, memo)
    puts "-" * 80
    # records
    results.each do |record|
      id, amount, memo, date = record.values
      puts sprintf(' %-4s | %-20s | %-10s | %-s', id, date, amount, memo)
    end
  end
 end

# program starts
CLI.new.run

